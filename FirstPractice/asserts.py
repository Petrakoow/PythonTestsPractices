from gnome_sort import sort

def test_1():
    # Обычные случаи
    assert sort([4, 2, 7, 1, 9, 3]) == [1, 2, 3, 4, 7, 9], \
        f"Ожидалось [1, 2, 3, 4, 7, 9], получено {sort([4, 2, 7, 1, 9, 3])}"
    assert sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], \
        f"Ожидалось [1, 2, 3, 4, 5], получено {sort([5, 4, 3, 2, 1])}"

def test_2():
    # Краевые случаи
    assert sort([]) == [], f"Ожидалось [], получено {sort([])}"
    assert sort([42]) == [42], f"Ожидалось [42], получено {sort([42])}"

def test_3():
    # Повторяющиеся элементы
    assert sort([5, 3, 8, 3, 2, 5]) == [2, 3, 3, 5, 5, 8], \
        f"Ожидалось [2, 3, 3, 5, 5, 8], получено {sort([5, 3, 8, 3, 2, 5])}"

def test_4():
    # Вещественные числа
    assert sort([4.2, 2.1, 7.5, 1.0, 9.8]) == [1.0, 2.1, 4.2, 7.5, 9.8], \
        f"Ожидалось [1.0, 2.1, 4.2, 7.5, 9.8], получено {sort([4.2, 2.1, 7.5, 1.0, 9.8])}"

def test_5():
    # Отрицательные числа
    assert sort([3, -1, -4, 2, 0]) == [-4, -1, 0, 2, 3], \
        f"Ожидалось [-4, -1, 0, 2, 3], получено {sort([3, -1, -4, 2, 0])}"

def test_6():
    # Смешанные отрицательные и положительные числа
    assert sort([-3, 0, 2, -1, 4]) == [-3, -1, 0, 2, 4], \
        f"Ожидалось [-3, -1, 0, 2, 4], получено {sort([-3, 0, 2, -1, 4])}"

def test_7():
    # Ошибочные случаи
    try:
        sort("not a list")
    except TypeError:
        pass
    else:
        raise AssertionError("Ожидалась ошибка TypeError при вводе не-списка")
    
    try:
        sort([1, 2, 'three', 4])
    except ValueError:
        pass
    else:
        raise AssertionError("Ожидалась ошибка ValueError при вводе списка с нечисловыми элементами")

if __name__ == '__main__':
    test_1()
    test_2()
    test_3()
    test_4()
    test_5()
    test_6()
    test_7()
    print("Все тесты пройдены!")
